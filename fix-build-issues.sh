{"tool_name": "mcp_create_file", "tool_arguments": {"path": "/app/fix-build-issues.sh", "file_text": "#!/bin/bash\n\n# Fix Build Issues - NeverFall Deployment\n# Run this script on your EC2 instance to fix the build errors\n\nset -e\n\necho \"\ud83d\udd27 Fixing NeverFall Build Issues\"\necho \"=================================\"\necho \"\"\n\n# Colors\nGREEN='\33[0;32m'\nYELLOW='\33[1;33m'\nRED='\33[0;31m'\nNC='\33[0m'\n\nprint_success() {\n echo -e \"${GREEN}\u2713 $1${NC}\"\n}\n\nprint_info() {\n echo -e \"${YELLOW}\u2139 $1${NC}\"\n}\n\nprint_error() {\n echo -e \"${RED}\u2717 $1${NC}\"\n}\n\n# Navigate to project root\ncd ~/NevrFall\n\n# Fix 1: Add swap space for memory-intensive builds\nprint_info \"Fix 1: Checking swap space...\"\nif [ $(swapon --show | wc -l) -eq 0 ]; then\n print_info \"Creating 4GB swap file (this will take a few minutes)...\"\n sudo fallocate -l 4G /swapfile\n sudo chmod 600 /swapfile\n sudo mkswap /swapfile\n sudo swapon /swapfile\n echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab\n print_success \"Swap space created (4GB)\"\nelse\n print_success \"Swap space already exists\"\nfi\nfree -h\necho \"\"\n\n# Fix 2: Update Frontend package.json to remove --turbopack flag\nprint_info \"Fix 2: Optimizing frontend build script...\"\ncd frontend\nif grep -q \"\\\"build\\\": \\\"next build --turbopack\\\"\" package.json; then\n print_info \"Removing --turbopack flag from build script...\"\n sed -i 's/\"build\": \"next build --turbopack\"/\"build\": \"NODE_OPTIONS=--max-old-space-size=3072 next build\"/' package.json\n print_success \"Frontend build script optimized\"\nelse\n print_success \"Frontend build script already optimized\"\nfi\ncd ..\necho \"\"\n\n# Fix 3: Fix Admin TypeScript errors\nprint_info \"Fix 3: Fixing Admin TypeScript configuration...\"\ncd admin\n\n# Check if types/index.ts exists\nif [ ! -f \"src/types/index.ts\" ]; then\n print_error \"types/index.ts not found, will need manual creation\"\nelse\n print_info \"Checking for Category type in types/index.ts...\"\n if ! grep -q \"export interface Category\" src/types/index.ts; then\n print_info \"Adding Category interface...\"\n # Backup original file\n cp src/types/index.ts src/types/index.ts.backup\n \n # Add Category interface at the beginning of the file after any existing interfaces\n cat << 'EOF' > src/types/category_temp.ts\nexport interface Category {\n _id: string;\n name: string;\n slug: string;\n description?: string;\n image?: string;\n parentCategory?: string | null;\n isActive: boolean;\n createdAt: string;\n updatedAt: string;\n}\n\nEOF\n # Prepend to existing file\n cat src/types/category_temp.ts src/types/index.ts > src/types/index_new.ts\n mv src/types/index_new.ts src/types/index.ts\n rm src/types/category_temp.ts\n \n print_success \"Category interface added\"\n else\n print_success \"Category interface already exists\"\n fi\nfi\n\n# Update tsconfig.json to be less strict during build\nprint_info \"Updating TypeScript configuration...\"\nif [ -f \"tsconfig.json\" ]; then\n # Create backup\n cp tsconfig.json tsconfig.json.backup\n \n # Update compiler options to allow unused locals\n node << 'EOF'\nconst fs = require('fs');\nconst tsconfig = JSON.parse(fs.readFileSync('tsconfig.json', 'utf8'));\nif (!tsconfig.compilerOptions) tsconfig.compilerOptions = {};\ntsconfig.compilerOptions.noUnusedLocals = false;\ntsconfig.compilerOptions.noUnusedParameters = false;\nfs.writeFileSync('tsconfig.json', JSON.stringify(tsconfig, null, 2));\nEOF\n \n print_success \"TypeScript config updated\"\nfi\n\n# Fix vite-env.d.ts for ImportMeta.env\nprint_info \"Fixing Vite environment types...\"\ncat << 'EOF' > src/vite-env.d.ts\n/// <reference types=\"vite/client\" />\n\ninterface ImportMetaEnv {\n readonly VITE_API_URL: string\n // Add other env variables as needed\n}\n\ninterface ImportMeta {\n readonly env: ImportMetaEnv\n}\nEOF\nprint_success \"Vite environment types fixed\"\n\ncd ..\necho \"\"\n\n# Fix 4: Clean install dependencies\nprint_info \"Fix 4: Reinstalling dependencies...\"\n\nprint_info \"Cleaning frontend node_modules...\"\ncd frontend\nrm -rf node_modules package-lock.json\nnpm install\nprint_success \"Frontend dependencies installed\"\ncd ..\n\nprint_info \"Cleaning admin node_modules...\"\ncd admin\nrm -rf node_modules package-lock.json\nnpm install\nprint_success \"Admin dependencies installed\"\ncd ..\n\necho \"\"\n\n# Fix 5: Build with memory limits\nprint_info \"Fix 5: Building applications with memory optimization...\"\n\nprint_info \"Building Frontend (this may take 5-10 minutes)...\"\ncd frontend\nNODE_OPTIONS=\"--max-old-space-size=3072\" npm run build\nif [ $? -eq 0 ]; then\n print_success \"Frontend built successfully!\"\nelse\n print_error \"Frontend build failed. Try building with even lower memory:\"\n echo \" NODE_OPTIONS=\\\"--max-old-space-size=2048\\\" npm run build\"\nfi\ncd ..\n\nprint_info \"Building Admin (this may take 2-3 minutes)...\"\ncd admin\nnpm run build\nif [ $? -eq 0 ]; then\n print_success \"Admin built successfully!\"\nelse\n print_error \"Admin build failed. Check errors above.\"\nfi\ncd ..\n\necho \"\"\necho \"=================================\"\nprint_success \"Build fixes completed!\"\necho \"\"\necho \"Next steps:\"\necho \"1. If builds succeeded, proceed with PM2 deployment\"\necho \"2. If frontend still fails, try: cd frontend && NODE_OPTIONS=\\\"--max-old-space-size=2048\\\" npm run build\"\necho \"3. If admin still fails, check TypeScript errors and fix manually\"\necho \"\"\nprint_info \"You can now continue with the deployment guide (Part 9.4)\"\n"}, "type": "mcp_tool"}
